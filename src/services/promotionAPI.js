import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { API_URL } from "../config/index";
import { selectToken } from "../slices/auth.slice";

export const promotionAPI = createApi({
  reducerPath: "PromotionManagement",
  tagTypes: ["PromotionList"],
  baseQuery: fetchBaseQuery({
    baseUrl: API_URL,
    prepareHeaders: (headers, { getState }) => {
      const token = selectToken(getState()); // Retrieve token from Redux state using selectToken selector
      if (token) {
        headers.append("Authorization", `Bearer ${token}`);
      }
      headers.append("Content-Type", "application/json");
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getPromotions: builder.query({
      query: () => `Promotion/GetAllPromotion`,
      providesTags: (result, _error, _arg) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "PromotionManagement", id })),
              { type: "PromotionList", id: "LIST" },
            ]
          : [{ type: "PromotionList", id: "LIST" }],
    }),
    getPromotionById: builder.query({
      query: (promotionCode) => `/Promotion/GetPromotion/${promotionCode}`,
      providesTags: (result, error, id) => [
        { type: "PromotionList", id: "LIST" },
      ],
    }),
    addPromotions: builder.mutation({
      query: (body) => {
        return {
          method: "POST",
          url: `/Promotion/AddPromotion`,
          body,
        };
      },
      invalidatesTags: [{ type: "PromotionList", id: "LIST" }],
    }),
    editPromotion: builder.mutation({
      query: (payload) => {
        return {
          method: "PUT",
          url: `api/v1/promotions/` + payload.id,
          body: payload,
        };
      },
      invalidatesTags: (res, err, arg) => [
        { type: "PromotionList", id: arg.id },
      ],
    }),
    deletePromotion: builder.mutation({
      query: (payload) => {
        return {
          method: "DELETE",
          url: `Promotion/DeletePromotion/${payload}`,
        };
      },
      invalidatesTags: (_res, _err, _arg) => [
        { type: "PromotionList", id: "LIST" },
      ],
    }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
  useGetPromotionsQuery,
  useGetPromotionByIdQuery,
  useAddPromotionsMutation,
  useLazyGetPromotionByIdQuery,
  useEditPromotionMutation,
  useDeletePromotionMutation,
} = promotionAPI;
