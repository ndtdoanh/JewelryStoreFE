import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { API_URL } from "../config";
import { selectToken } from "../slices/auth.slice";

export const categoryAPI = createApi({
    reducerPath: "categoryManagement",
    tagTypes: ["CategoryList"],
    baseQuery: fetchBaseQuery({
        baseUrl: API_URL,
        prepareHeaders: (headers, { getState }) => {
            const token = selectToken(getState()); // Retrieve token from Redux state using selectToken selector
            if (token) {
                headers.append("Authorization", `Bearer ${token}`);
            }
            headers.append("Content-Type", "application/json");
            return headers;
        },
    }), endpoints: (builder) => ({

        getCategories: builder.query({
            query: () => `TypePrice/GetAllTypePrice`,
            providesTags: (result, _error, _arg) =>
                result
                    ? [
                        ...result.map(({ id }) => ({ type: "categoryManagement", id })),
                        { type: "CategoryList", id: "LIST" },
                    ]
                    : [{ type: "CategoryList", id: "LIST" }],
        }),
        getCategoryById: builder.query({
            query: (id) => `TypePrice/ViewTypePriceDetail?typeId=${id}`,
            providesTags: (result, error, id) => [{ type: "CategoryList", id }],
        }),

        addCategories: builder.mutation({
            query: (body) => {
                return {
                    method: "POST",
                    url: `TypePrice/CreateNewTypePrice`,
                    body,
                };
            },
            invalidatesTags: [{ type: "CategoryList", id: "LIST" }],
        }),
        editCategories: builder.mutation({
            query: (payload) => {
                return {
                    method: "PUT",
                    url: `TypePrice/UpdateTypePrice?typeId=${payload.typeId}`,
                    body: payload,
                };
            },
            invalidatesTags: (res, err, arg) => [{ type: "CategoryList", id: arg.id }],
        }),
        deleteCategories: builder.mutation({
            query: (payload) => {
                return {
                    method: "DELETE",
                    url: `TypePrice/DeleteTypePrice?typeId=${payload}`,
                };
            },
            invalidatesTags: (_res, _err, _arg) => [
                { type: "CategoryList", id: "LIST" },
            ],
        }),
    }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
    useGetCategoriesQuery,
    useGetCategoryByIdQuery,
    useAddCategoriesMutation,
    useEditCategoriesMutation,
    useDeleteCategoriesMutation,

} = categoryAPI;
